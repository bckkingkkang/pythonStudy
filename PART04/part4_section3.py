# 자료형과 자료구조(복합 자료형) - 리스트, 튜플
month = [1, 2, 3, 4, 5, 6]
print(month)
print(type(month))

# 다른 자료형들로 리스트 항목 구성 가능
month2 = ["Jan", 2, 3, ["Apr", 4, "4월"]]
print(month2)
print(month2[0])
print(month2[1])
print(month2[3])
print(month2[-1])

# 리스트의 일부분을 가져와 사용하고 싶은 경우
# 슬라이스(Slice) 방법 : 리스트_이름[n1:n2]
city = ['안양', '인천', '서울', '부천', '용인']
print(city[2:4])

# 리스트의 모든 항목을 처음부터 끝까지 슬라이스
print(city[:])

# n1번째 값부터 끝까지 슬라이스
print(city[2:])

# 맨 앞자리 값부터 n2보다 하나 앞자리 앞까지 슬라이스
print(city[:3])

# n1부터 시작해서 n2보다 하나 작은 위치까지 n3만큼 증가하면서 슬라이스
print(city[1:4:2])

# 리스트 안에 구성된 리스트의 항목 가져오기
city = [['안양', '인천'], '서울', '부천', '용인']
print(city[0][1])

'''
리스트 메소드를 사용하여 자유롭게 항목들을 변경해 사용할 수 있다.
'''

# append() : 새로운 값을 맨 뒤에 추가
order = ['치즈버거', '새우버거']
order.append('불고기버거')
print(order)

# 해당 위치의 값을 다시 저장
order[0] = '치킨버거'
print(order)

# 리스트 안의 항목을 위치(인덱스)로 접근해 삭제
del order[1]
print(order)

# 리스트 안의 항목을 값으로 접근해 삭제
order.remove('치킨버거')
print(order)

# 리스트 안의 일정 위치에 값 추가
score = [99, 100, 85, 90, 92]
score.insert(1, 77)
print(score)

'''
    값을 추가하는 위치가 중요하지 않고 맨 뒤에 추가하기만 하면 append() 사용
    지정한 위치에 값을 넣어야하는 경우에는 insert() 사용
'''

# pop() : 리스트 안의 항목을 꺼내온다.
# 인덱스를 넣어 pop -> 해당 항목을 반환함
year = [2020,  2021, 2022, 2023]
print(year.pop(0))
# 인덱스를 넣지 않고 pop() 실행하면 리스트 맨 끝 값을 반환
print(year.pop())
# 리스트 안에서는 해당 항목 사라짐
print(year)

# 리스트 안에 있는 특정 값의 인덱스 확인
score = [99, 100, 85, 90, 92, 85]
print(score.index(85))
# 85가 여러 번 있을 경우, 첫 번째 나오는 위치로 알려준다.

# 리스트 안에 특정 값이 몇 개인지 확인
print(score.count(85))

# 두 리스트들의 항목들을 하나의 리스트로 합친다.
n1 = [1, 2, 3]
n2 = [4, 5, 6]
print(n1 + n2)
# 더한 순서대로 리스트를 구성
print(n2 + n1)

# 리스트들의 항목들을 반복하여 사용
num = [100, 200, 300]
print(num * 3)

# 리스트 안의 항목 개수를 확인
x = [10, 20, 30, 40, 50, 60, 70]
print(len(x))

# 값을 작은 것부터 순서대로 나열
x2 = [15, 2, 8, 3, 6, 1]
x2.sort()
print(x2)

# 숫자가 아닌 문자 자료형은 sort()를 사용하면 알파벳 순서대로 또는 한글 자모 순서대로 나열한다.
# sort()는 결과값을 반환하지 않고 sorted() 는 결괏값을 반환한다.
print(x2.sort())
print(sorted(x2))

# 리스트 안의 항모들 순서를 뒤집어서 나열
y = [1000, 2000, 3000]
y.reverse()
print(y)

'''
    튜플
    - 리스트와 함께 여러 개의 자룟값을 하나로 묶어 다루는 대표적인 방법
    - 리스트처럼 항목에 인덱스로 접근할 수 있다.
    - 리스트와 달리 추가, 수정 삭제 등의 변경이 불가능한 자료형이다.
'''

# 튜플은 소괄호 사이에 쉼표로 구분하여 항목들을 만든다.
tu = (1, 2, 3)
print(type(tu))

# 소괄호 없이 쉼표로만 구분하여 항목들을 구성해 튜플을 만들 수 있다.
tu = 1, 2, 3, 4
print(type(tu))
# 튜플이 하나일 경우 콤마가 있어야 한다.
tu1 = 1,
print(type(tu1))

# 튜플 생성 시 여러 자료형으로 구성 가능하다.
tu1 = (4, 5, 6, 'bye', 2.3)
print(type(tu1))
print(tu1[0])
print(tu1[3])

# 튜플을 슬라이스하여 일부분을 가져와 사용할 수 있다.
tu3 = (10, 20, 30, 40, 50, 60, 70)
print(tu3[2:5])

'''
    튜플은 항목들을 자유롭게 변경해 사용할 수 없다.
    항목의 추가, 수정, 삭제 등을 할 수 없다.
'''

# 튜플 항목 중 특정 값의 위치를 확인할 수 있다.
number = (11, 14, 15, 20, 26, 30, 33)
print(number.index(20))     # 20의 위치인 인덱스 3 반환

# 튜플 안에 들어있는 특정 값의 개수를 확인
room_number = (1001, 1012, 1013, 1001, 1010)
print(room_number.count(1001))
# 자료형 변경에 관련된 메소드 사용 시 에러 발생

# 두 튜플의 항목들을 합하여 새로운 튜플로 구성
a = (1, 2, 3)
b = (4, 5, 6)
print(a+b)

# 튜플 항목들을 수만큼 반복하여 새로운 튜플로 보여준다.
c = (7, 8, 9)
print(c*2)
# 튜플 c를 변경한 것이 아니라 구성한 값을 새로운 튜플로 보여준다.

