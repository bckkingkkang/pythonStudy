'''
    딕셔너리
    : 키(Key)와 값(Value)을 한 쌍으로 하여 항목을 만든다.
      키를 사용해 항목에 접근하여 값을 가져올 수 있다.
      딕셔너리 자료형은 추가, 수정, 삭제가 가능하다.
'''

# 딕셔너리는 중괄호 사이에 콤마로 구분하여 항목을 만든다.
d = {12:'홍길동', 7:'심청', 30:'놀부'}
print(type(d))

'''
    키로 주로 사용되는 것은 숫자형과 문자열이다.
    이외에 튜플형(단, 변형 가능 자료형을 포함하지 않은 경우)도 키로 사용할 수 있다.
'''
d1 = {12:'홍길동', 7:'심청', 30:'놀부'}
d2 = {'에피타이저':'샐러드', '메인요리':'스테이크', '디저트':'홍차'}
d3 = {(12, 13, 14):'부모동반관람', (15, 16, 17, 18):'15세 이상 관람'}
print(type(d1))
print(type(d2))
print(type(d3))
# 구성항목 중 리스트, 딕셔너리 등이 들어있으면 튜플을 키로 사용할 수 없다.

# 키로 접근하여 필요한 항목의 값을 가져올 수 있다.
mystudy = {11:'1챕터', 12:'2챕터', 13:'3챕터', 14:'총 정리', 15:'시험'}
print(mystudy[14])

'''
    딕셔너리에서 키로 접근하여 대입 연산자로 값을 할당
    
    - 만약 해당 키가 존재하지 않을 경우 새로운 항목을 추가
    - 이미 그 키가 있는 경우 해당 키의 값을 새롭게 할당한 값으로 변경
'''
stage = {5:'사막', 10:'동굴', 15:'도시'}
stage[20] = '숲 속'
print(stage)
stage[5] = '바다'
print(stage)

# 딕셔너리 업데이트 (추가 및 수정) - 이미 키가 있다면 추가되는 것이 아니라 값만 수정
student = {1:'John', 2:'Tom', 3:'Mark'}
student.update({4:'Grace'})
print(student)
student.update({1:'Kelly'})
print(student)

# 딕셔너리 삭제
student = {1:'John', 2:'Tom', 3:'Mark'}
del student[2]
print(student)

# 딕셔너리 내 모든 항목 삭제
student = {1:'John', 2:'Tom', 3:'Mark'}
student.clear()
print(student)

# 가져오기 - 딕셔너리 내의 모든 키들만 모아서 확인
student = {1:'John', 2:'Tom', 3:'Mark'}
print(student.keys())

# 딕셔너리 내의 모든 값들만 모아서 확인
print(student.values())

# 딕셔너리 내의 모든 항목들에 대하여 키와 값을 쌍으로 모아서 확인
print(student.items())
print(student)

# 딕셔너리 내의 특정 항목의 값을 키를 사용해 가져온다.
print(student.get(1))

# 키가 딕셔너리 안에 있는지 확인 - 있다면 True를 반환하고, 없다면 False를 반환한다.
student = {1:'John', 2:'Tom', 3:'Mark'}
print(3 in student)
print(5 in student)

# 세트 : 중복 항목이 없는 복합 자료형, 정렬되지 않은 자료로 순서를 가지지 않는다.
# 중괄호 안에 항목들을 콤마로 연결하여 만든다.
num = {12, 15, 11, 14, 13}
print(type(num))

# 세트 자료형 만들기
# 문자열을 세트로 만들기
print(set('Hello'))     # 중복된 l을 하나만 구성

# 리스트를 세트로 만들기
print(set([7, 7, 9, 3]))

'''
    set()는 복합 자료형의 항목들을 세트 자료형으로 만들어 준다.
    대개 문자열이나 리스트를 세트로 만들어 사용하지만, 딕셔너리, 튜플, 세트에도 사용할 수 있다.
    딕셔너리를 set()로 만들 경우 키들을 가져와 항목으로 구성한다.
'''

# range()를 이용하여 수로 구성된 세트를 만든다.
print(set(range(3)))            # 0부터 3보다 하나 작은 수까지 나열
print(set(range(2, 5)))         # 2부터 5보다 하나 작은 수까지 나열
print(set(range(2, 10, 3)))     # 2부터 10보다 하나 작은 수까지, 3식 커지면서 나열
# 순서에 관계없이 집합을 만든다.

# 세트 연산 - 교집합 : 공통된 항목만 가져옴
x = {12, 23, 35, 57}
y = {11, 23, 24, 34}
print(x & y)

# 세트 연산 - 합집합 : 모든 항목을 가져오되, 중복된 항목은 하나로 구성
print(x|y)

# 세트 연산 - 차집합 : x에서 y에 속한 항목이 있다면 제외
print(x-y)

# 세트 연산 - 대칭 차집합 : 합집합에서 교집합을 뺀 항목들
print(x^y)

# 세트 메소드
# 추가 - 항목이 없다면 새롭게 추가되고, 항목이 있다면 새롭게 더 추가되지 않는다. 추가한 결과는 순서없이 구성된다.
pitch = {'도', '미', '솔'}
pitch.add('라')
print(pitch)

pitch.update({'시', '레', '도'})
# 여러 항목을 한 번에 추가할 때 update() 를 사용
# 원래 있던 값과 새롭게 추가된 항목으로 세트를 구성하며, 중복되는 값은 추가되지 않는다. 추가한 결과는 순서없이 구성된다.
print(pitch)

# 특정 항목 삭제하기 - discard로 항목을 정하여 삭제
pitch.discard('미')
print(pitch)

# 특정 항목 삭제하기 - remove()로 항목을 정하여 삭제
pitch.remove('레')
print(pitch)

# 모두 삭제하기 - clear()
pitch.clear()
print(pitch)        # 모두 삭제되고, 빈 세트만 남음
print(type(pitch))

# 길이 - 세트 항목의 개수를 확인
pitch = {'도', '미', '솔'}
print(len(pitch))